"==> Plug
call plug#begin("~/.local/share/nvim/plugged")

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Deocomplete
Plug 'ervandew/supertab'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi', {'for': ['python']}
Plug 'zchee/deoplete-clang', {'for': ['c', 'cpp', 'h']}

" Other completion
Plug 'jiangmiao/auto-pairs'

" Language specific
Plug 'rust-lang/rust.vim', {'for': ['rust']}
Plug 'racer-rust/vim-racer'

" Custom motions
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tommcdo/vim-lion'
Plug 'wellle/targets.vim'

" Colorscheme
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'sjl/badwolf'
Plug 'jnurmine/Zenburn'

" Misc
Plug 'dhruvasagar/vim-table-mode'
Plug 'mhinz/vim-startify'
Plug 'yuttie/comfortable-motion.vim'

call plug#end()
"<==

"==> Options
syntax enable

" Wildmenu
set wildmenu
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Searching
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set gdefault

" Drawing
set lazyredraw
set noerrorbells

" Backups
set nobackup
set nowritebackup
set noswapfile

" Tabs
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

" Numbering
set relativenumber
set number

" List
set listchars=tab:»·,trail:·
set list

" Splits
set splitright
set splitbelow

" Misc
set showcmd
set clipboard=unnamed
set mouse=nvc
set history=500
set scrolloff=7
set backspace=eol,indent
set whichwrap=h,l
set laststatus=2
set colorcolumn=80,120
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
"<==

"==> Maps
" Escaping from insert
inoremap jk <Esc>
inoremap JK <Esc>

" Leader
let g:mapleader = ","

" Remove highlights from search
nmap <silent> <leader><cr> :noh<cr>
" Open vimrc
nmap <silent> <leader>e :e ~/.dotfiles/vim/vimrc<cr>
" Save
nmap <space> :w<cr>

" Quit
nnoremap <leader>q :q<cr>
" Kill
nnoremap <leader>k :q!<cr>

" [S]plit line (sister to [J]oin lines)
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
"<==

"==> Autocmds and cmds
command! Te !{{ terminal }}

" Automatically get Eclim shortcuts on java files
au BufRead *.java nnoremap <leader>i :JavaImportOrganize<CR>
au BufRead *.java inoremap . .<C-x><C-u>

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " Return to last edit position when opening files

au BufReadPost *.hdl set ft=hdl
"<==

"==> Functions
"==> Colorscheme
function! Colorscheme(colscheme)
    set background=dark

    exec "colo ".a:colscheme

    " Same background as terminal would do
    highlight NonText ctermbg=none guibg=none
    highlight Normal ctermbg=none guibg=none

endfunction
"<==

"==> Vimrc fold text
function! VimrcFoldText()
    let line = getline(v:foldstart)
    return v:folddashes . line[3:]
endfunction
"<==
"<==

"==> Colorscheme
call Colorscheme("Tomorrow-Night")
" :autocmd BufEnter,FileType *
" \   if &ft ==# 'python' | call Colorscheme("Tomorrow-Night") |
" \   else | call Colorscheme("zenburn") |
" \   endif
"<==

"==> UltiSnips
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" For automatic stuff
let g:snips_author="{{ full_name }}"
let g:snips_email="{{ email }}"
let g:snips_github="{{ github }}"

" Automatic filetype for vim
autocmd BufRead ~/.vimrc UltiSnipsAddFiletypes vimrc.vim
"<==

"==> Supertab
let g:SuperTabDefaultCompletionType = "<c-n>"
"<==

"==> Startify
let g:startify_list_order = ['commands', 'bookmarks', 'dir', 'sessions']
let g:startify_bookmarks = []

hi StartifyBracket ctermfg=240
hi StartifyFile    ctermfg=147
hi StartifyFooter  ctermfg=240
hi StartifyHeader  ctermfg=114
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
hi StartifySpecial ctermfg=240
"<==

"==> Deocomplete + friends
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/lib/clang'
let g:deoplete#complete_method = 'omnifunc'
"<==

" vim:foldmethod=marker:foldmarker=\=\=>,<\=\=:foldtext=VimrcFoldText()
